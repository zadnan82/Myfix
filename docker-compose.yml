# SEVDO Platform - Docker Compose with React Frontend and Preview System
# Consolidated file for both development and production environments
# Use with: docker-compose --env-file .env.[development|production] up

# Simple network for service communication
networks:
  sevdo-network:
    driver: bridge

# Persistent volumes for data
volumes:
  postgres_data:
  redis_data:
  sevdo_logs:
  sevdo_tasks: 
  playground_data:
  preview_data:
  sevdo_generated_websites:  # NEW: Shared volume for generated websites

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: sevdo-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sevdo_db}
      POSTGRES_USER: ${POSTGRES_USER:-sevdo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init_rag.sql:/docker-entrypoint-initdb.d/init_rag.sql
    networks:
      - sevdo-network
    ports:
      # Only expose postgres port in development mode
      - ${EXPOSE_DB_PORT:-5432:5432}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sevdo_user} -d ${POSTGRES_DB:-sevdo_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: sevdo-redis
    volumes:
      - redis_data:/data
    networks:
      - sevdo-network
    ports:
      # Only expose redis port in development mode
      - ${EXPOSE_REDIS_PORT:-6379:6379}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # React Frontend - Environment-aware configuration
  user-frontend:
    build:
      context: ./user_frontend
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile.dev}
      args:
        - VITE_API_URL=${FRONTEND_API_URL:-http://localhost:8000}
        - VITE_NODE_ENV=${VITE_NODE_ENV:-development}
        - VITE_APP_NAME=Sevdo
    container_name: user-frontend
    environment:
      - VITE_API_URL=${FRONTEND_API_URL:-http://localhost:8000}
      - VITE_DASHBOARD_URL=${DASHBOARD_URL:-http://localhost:5000/dev/dashboard}
      - VITE_BACKEND_URL=${BACKEND_URL:-http://localhost:8001}
      - VITE_NODE_ENV=${VITE_NODE_ENV:-development}
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - VITE_PREVIEW_BASE_URL=${PREVIEW_BASE_URL:-http://localhost}
    volumes:
      # Only mount volumes in development mode
      - ${FRONTEND_VOLUMES:-./user_frontend:/app}
      - ${FRONTEND_NODE_MODULES:-/app/node_modules}
    networks:
      - sevdo-network
    ports:
      # Use different port mappings for dev/prod
      - "${FRONTEND_PORT:-5173}:${FRONTEND_INTERNAL_PORT:-5173}"
    depends_on:
      - user-backend

  # SEVDO Backend Compiler Service
  sevdo-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sevdo-backend
    command: ["python", "-m", "uvicorn", "sevdo_backend.backend_compiler:app", "--host", "0.0.0.0", "--port", "8001"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
    volumes:
      - sevdo_logs:/app/logs
      - sevdo_tasks:/app/tasks
    networks:
      - sevdo-network
    ports:
      # Only expose port in development mode
      - ${EXPOSE_SEVDO_BACKEND_PORT:-8001:8001}
    depends_on:
      redis:
        condition: service_healthy

  # SEVDO Frontend Compiler Service
  sevdo-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sevdo-frontend
    command: ["python", "-m", "uvicorn", "sevdo_frontend.frontend_compiler:app", "--host", "0.0.0.0", "--port", "8002"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
    volumes:
      - sevdo_logs:/app/logs
      - sevdo_tasks:/app/tasks
      - playground_data:/app/playground
    networks:
      - sevdo-network
    ports:
      # Only expose port in development mode
      - ${EXPOSE_SEVDO_FRONTEND_PORT:-8002:8002}
    depends_on:
      redis:
        condition: service_healthy

  # Playground Development Server
  playground:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sevdo-playground
    command: ["python", "-m", "uvicorn", "playground.playground_server:app", "--host", "0.0.0.0", "--port", "8003"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - DB_URL=postgresql://${POSTGRES_USER:-sevdo_user}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-sevdo_db}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - playground_data:/app/playground/data  # Persistent data
      - ./playground:/app/playground          # Source code
      - ./sevdo_frontend:/app/sevdo_frontend  # Frontend dependencies
    networks:
      - sevdo-network
    ports:
      # Only expose port in development mode
      - ${EXPOSE_PLAYGROUND_PORT:-8003:8003}
    depends_on:
      - sevdo-frontend
      - redis
      - postgres
      - user-backend
       
  # User Backend API
  user-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-backend
    user: root 
    command: ["python", "-m", "uvicorn", "user_backend.main:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - DB_URL=postgresql://${POSTGRES_USER:-sevdo_user}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-sevdo_db}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-key-here}
      - SEVDO_BACKEND_URL=http://sevdo-backend:8001
      - SEVDO_FRONTEND_URL=http://sevdo-frontend:8002
      - PREVIEW_MANAGER_URL=http://preview-manager:8080
      - CORS_ORIGINS=${CORS_ORIGINS:-*} 
      - LLM_GATEWAY_URL=http://192.168.16.103:8000        
    volumes:
      - sevdo_logs:/app/logs
      - ./templates:/app/templates
      - /var/run/docker.sock:/var/run/docker.sock
      - sevdo_generated_websites:/app/generated_websites  # FIXED: Shared volume
    networks:
      - sevdo-network
    ports:
      # Only expose port in development mode
      - ${EXPOSE_USER_BACKEND_PORT:-8000:8000}
      - "9001:9001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sevdo-backend:
        condition: service_started
      sevdo-frontend:
        condition: service_started
      preview-manager:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3

  # Dashboard UI Service
  sevdo-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sevdo-dashboard
    command: ["python", "dashboard.py"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - SEVDO_TASK_DIR=/app/tasks
      - SEVDO_OUTPUT_DIR=/app/logs
      - SEVDO_FRONTEND_URL=http://sevdo-frontend:8002
      - SEVDO_BACKEND_URL=http://sevdo-backend:8001
      - LLM_GATEWAY_URL=${LLM_GATEWAY_URL:-http://192.168.16.103:8000}
    volumes:
      - sevdo_logs:/app/logs
      - sevdo_tasks:/app/tasks
    networks:
      - sevdo-network
    ports:
      # Only expose port in development mode
      - ${EXPOSE_DASHBOARD_PORT:-5000:5000}
    depends_on:
      - user-backend
      - sevdo-backend

  # Task Runner for AI Processing
  sevdo-task-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sevdo-task-runner
    command: ["bash", "task-runner-aider.sh"]
    environment:
      - PYTHONPATH=/app
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - TASK_DIR=/app/tasks
      - OUTPUT_DIR=/app/logs
      - MODEL=${AIDER_MODEL:-llama3.2:3b}
      - MODEL_TYPE=remote
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-key-here}
    volumes:
      - sevdo_logs:/app/logs
      - sevdo_tasks:/app/tasks
    networks:
      - sevdo-network
    # Allow container to reach host's Ollama server
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - sevdo-dashboard
      - postgres
      - redis

  # Preview Container Manager - FIXED
  preview-manager:
    build:
      context: .
      dockerfile: Dockerfile.preview-manager
    container_name: sevdo-preview-manager
    user: root  # Required for Docker socket access
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PREVIEW_BASE_PORT=3000
      - MAX_CONCURRENT_PREVIEWS=50
      - SEVDO_ENV=${SEVDO_ENV:-development}
      - PYTHONUNBUFFERED=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - preview_data:/app/preview-data
      - ./preview-manager:/app/preview-manager
      - sevdo_generated_websites:/app/generated_websites:ro  # FIXED: Shared volume mount
    networks:
      - sevdo-network
    ports:
      - "${PREVIEW_MANAGER_PORT:-8080}:8080"
    depends_on:
      - redis
    privileged: true  # Required for Docker operations
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy for Preview Routing
  preview-proxy:
    image: nginx:alpine
    container_name: sevdo-preview-proxy
    volumes:
      - ./nginx/preview-proxy.conf:/etc/nginx/conf.d/default.conf  # Proxy config
      - preview_data:/var/log/nginx  # Log storage
    ports:
      - "${PREVIEW_PROXY_PORT:-80}:80"  # Main preview access port
    networks:
      - sevdo-network
    depends_on:
      - preview-manager
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3